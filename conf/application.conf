# Copyright 2022 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = tax-fraud-reporting

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
play.modules.enabled += "uk.gov.hmrc.objectstore.client.play.modules.ObjectStoreModule"
play.modules.enabled += "uk.gov.hmrc.internalauth.client.modules.InternalAuthModule"
play.modules.enabled += "uk.gov.hmrc.taxfraudreporting.config.HmrcModule"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  uk.gov.hmrc.taxfraudreporting.controllers.FraudReportController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
  uk.gov.hmrc.taxfraudreporting.controllers.SDESCallbackController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = false
}

# Microservice specific config

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

mongodb {
  uri = "mongodb://localhost:27017/tax-fraud-reporting"
}

microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
    auth {
      host = localhost
      port = 8500
    }

    sdes {
      host = localhost
      port = 9191
    }

    object-store {
    	host = localhost
    	port = 8464
    }
  }
}

object-store {
	default-retention-period = "1-week"
}

internal-auth {
    token = "BaGOxRey-mz4ED1qJyzWKvM0NxnSXenvDTONigIP9y4bUBlPF9aW5ljTKGbGfYQs1eb8k9ZvW"
}

services {
	fileNameFormat = "DIGITAL_EVIBDAPP_%s_FRAUD_REPORTS.xml"
	dateTimeFormat = "yyyyMMddHHmm"
	xmlFactory {
		rootElement = "reports"
		timePattern = "dd/MM/yyyy HH:mm:ss"

		sendingSystem = "RIS Fraud Reporting"
		receivingSystem = "EVI BDApp"
		version = "0.1"
	}
	objectStorageWorker {
	    timeOfJob = "04:30:00.000"
		frequency = 2
		path = "sdes"
		lock-duration = 1 minute
	}
   sdes {
       location = "sdes-stub"
       client-id = "client-id"
       information-type = "fraud-reporting"
       recipient-or-sender = "tax-fraud-reporting"
       file-location-url = "http://localhost:8464/object-store/object/"
   }
}

fraud-report-ttl = "7 days"